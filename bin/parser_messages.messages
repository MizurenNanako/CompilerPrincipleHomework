program: WHILE
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

Dot is not a line delimiter.

program: STRUCT WHILE
##
## Ends in an error in state: 1.
##
## struct_specifier -> STRUCT . opt_tag LC list(def) RC [ SEMI ID ]
## struct_specifier -> STRUCT . tag [ SEMI ID ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

The keyword is a keyword and cannot be used as struct name.

program: STRUCT ID WHILE
##
## Ends in an error in state: 2.
##
## opt_tag -> ID . [ LC ]
## tag -> ID . [ SEMI ID ]
##
## The known suffix of the stack is as follows:
## ID
##

What do you mean adding keyword here? expecting open bracket.

program: STRUCT LC WHILE
##
## Ends in an error in state: 5.
##
## struct_specifier -> STRUCT opt_tag LC . list(def) RC [ SEMI ID ]
##
## The known suffix of the stack is as follows:
## STRUCT opt_tag LC
##

No no no, keyword is not a type.

program: STRUCT LC KFLOAT WHILE
##
## Ends in an error in state: 9.
##
## def -> specifier . loption(separated_nonempty_list(COMMA,dec)) SEMI [ WHILE STRUCT RETURN RC NOT MINUS LP LC KINT KFLOAT INT IF ID FLOAT ]
##
## The known suffix of the stack is as follows:
## specifier
##

No no no, keyword cannot be used as variable name.

program: STRUCT LC KFLOAT ID WHILE
##
## Ends in an error in state: 11.
##
## dec -> var_dec . [ SEMI COMMA ]
## dec -> var_dec . ASSIGNOP exp [ SEMI COMMA ]
## var_dec -> var_dec . LB INT RB [ SEMI LB COMMA ASSIGNOP ]
##
## The known suffix of the stack is as follows:
## var_dec
##

Expecting assignment or a semicolon, not keyword.

program: KFLOAT ID LB WHILE
##
## Ends in an error in state: 12.
##
## var_dec -> var_dec LB . INT RB [ SEMI RP LB COMMA ASSIGNOP ]
##
## The known suffix of the stack is as follows:
## var_dec LB
##

There should be a integer, not keyword.

program: KFLOAT ID LB INT WHILE
##
## Ends in an error in state: 13.
##
## var_dec -> var_dec LB INT . RB [ SEMI RP LB COMMA ASSIGNOP ]
##
## The known suffix of the stack is as follows:
## var_dec LB INT
##

Should be integer, not 'intkeyword.

program: STRUCT LC KFLOAT ID ASSIGNOP WHILE
##
## Ends in an error in state: 15.
##
## dec -> var_dec ASSIGNOP . exp [ SEMI COMMA ]
##
## The known suffix of the stack is as follows:
## var_dec ASSIGNOP
##

Expecting expression.

program: STRUCT LC KFLOAT ID ASSIGNOP NOT WHILE
##
## Ends in an error in state: 16.
##
## exp -> NOT . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

Expecting expression.

program: STRUCT LC KFLOAT ID ASSIGNOP MINUS WHILE
##
## Ends in an error in state: 17.
##
## exp -> MINUS . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

Expecting expression.

program: STRUCT LC KFLOAT ID ASSIGNOP LP WHILE
##
## Ends in an error in state: 18.
##
## exp -> LP . exp RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## LP
##

Expecting expression.

program: STRUCT LC KFLOAT ID ASSIGNOP LP FLOAT SEMI
##
## Ends in an error in state: 22.
##
## exp -> exp . ASSIGNOP exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> LP exp . RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## LP exp
##

Opening parenthesis unmatched.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT STAR WHILE
##
## Ends in an error in state: 23.
##
## exp -> exp STAR . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp STAR
##

Expecting expression.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT STAR FLOAT WHILE
##
## Ends in an error in state: 24.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp STAR exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp STAR exp
##

Expecting expression.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LP WHILE
##
## Ends in an error in state: 25.
##
## exp -> exp LP . loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp LP
##

Expecting expression, 'float' cannot appear in an expression.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LP FLOAT SEMI
##
## Ends in an error in state: 29.
##
## exp -> exp . ASSIGNOP exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## separated_nonempty_list(COMMA,exp) -> exp . [ RP ]
## separated_nonempty_list(COMMA,exp) -> exp . COMMA separated_nonempty_list(COMMA,exp) [ RP ]
##
## The known suffix of the stack is as follows:
## exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT PLUS WHILE
##
## Ends in an error in state: 30.
##
## exp -> exp PLUS . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp PLUS
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT PLUS FLOAT WHILE
##
## Ends in an error in state: 31.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp PLUS exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp PLUS exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LB WHILE
##
## Ends in an error in state: 32.
##
## exp -> exp LB . exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp LB
##

Expecting expressions, unmatched opening bracket.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LB FLOAT SEMI
##
## Ends in an error in state: 33.
##
## exp -> exp . ASSIGNOP exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp LB exp . RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp LB exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT OR WHILE
##
## Ends in an error in state: 35.
##
## exp -> exp OR . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp OR
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT OR FLOAT WHILE
##
## Ends in an error in state: 36.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp OR exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp OR exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT NEQ WHILE
##
## Ends in an error in state: 37.
##
## exp -> exp NEQ . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp NEQ
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT NEQ FLOAT WHILE
##
## Ends in an error in state: 38.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp NEQ exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp NEQ exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT MINUS WHILE
##
## Ends in an error in state: 39.
##
## exp -> exp MINUS . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp MINUS
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT MINUS FLOAT WHILE
##
## Ends in an error in state: 40.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp MINUS exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp MINUS exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT DOT WHILE
##
## Ends in an error in state: 41.
##
## exp -> exp DOT . ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp DOT
##

Expecting member name.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT DIV WHILE
##
## Ends in an error in state: 43.
##
## exp -> exp DIV . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp DIV
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT DIV FLOAT WHILE
##
## Ends in an error in state: 44.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp DIV exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp DIV exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LT WHILE
##
## Ends in an error in state: 45.
##
## exp -> exp LT . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp LT
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LT FLOAT WHILE
##
## Ends in an error in state: 46.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp LT exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp LT exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LEQ WHILE
##
## Ends in an error in state: 47.
##
## exp -> exp LEQ . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp LEQ
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LEQ FLOAT WHILE
##
## Ends in an error in state: 48.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp LEQ exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp LEQ exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT GT WHILE
##
## Ends in an error in state: 49.
##
## exp -> exp GT . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp GT
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT GT FLOAT WHILE
##
## Ends in an error in state: 50.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp GT exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp GT exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT GEQ WHILE
##
## Ends in an error in state: 51.
##
## exp -> exp GEQ . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp GEQ
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT GEQ FLOAT WHILE
##
## Ends in an error in state: 52.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp GEQ exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp GEQ exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT EEQ WHILE
##
## Ends in an error in state: 53.
##
## exp -> exp EEQ . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp EEQ
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT EEQ FLOAT WHILE
##
## Ends in an error in state: 54.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp EEQ exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp EEQ exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT AND WHILE
##
## Ends in an error in state: 55.
##
## exp -> exp AND . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp AND
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT AND FLOAT WHILE
##
## Ends in an error in state: 56.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp AND exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp AND exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT ASSIGNOP WHILE
##
## Ends in an error in state: 57.
##
## exp -> exp ASSIGNOP . exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp ASSIGNOP
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT ASSIGNOP FLOAT WHILE
##
## Ends in an error in state: 58.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp ASSIGNOP exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## exp ASSIGNOP exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT LP FLOAT COMMA WHILE
##
## Ends in an error in state: 59.
##
## separated_nonempty_list(COMMA,exp) -> exp COMMA . separated_nonempty_list(COMMA,exp) [ RP ]
##
## The known suffix of the stack is as follows:
## exp COMMA
##

Expecting expressions.

program: STRUCT LC KFLOAT ID ASSIGNOP MINUS FLOAT WHILE
##
## Ends in an error in state: 62.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> MINUS exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## MINUS exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP NOT FLOAT WHILE
##
## Ends in an error in state: 63.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> NOT exp . [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI RP RB PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## NOT exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID ASSIGNOP FLOAT RP
##
## Ends in an error in state: 64.
##
## dec -> var_dec ASSIGNOP exp . [ SEMI COMMA ]
## exp -> exp . ASSIGNOP exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV COMMA ASSIGNOP AND ]
##
## The known suffix of the stack is as follows:
## var_dec ASSIGNOP exp
##

Expecting operators.

program: STRUCT LC KFLOAT ID COMMA WHILE
##
## Ends in an error in state: 69.
##
## separated_nonempty_list(COMMA,dec) -> dec COMMA . separated_nonempty_list(COMMA,dec) [ SEMI ]
##
## The known suffix of the stack is as follows:
## dec COMMA
##

Here is meant to be some declarations, right?

program: STRUCT LC KFLOAT SEMI WHILE
##
## Ends in an error in state: 71.
##
## struct_specifier -> STRUCT opt_tag LC list(def) . RC [ SEMI ID ]
##
## The known suffix of the stack is as follows:
## STRUCT opt_tag LC list(def)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 73, spurious reduction of production list(def) ->
## In state 74, spurious reduction of production list(def) -> def list(def)
##

In struct definition, this declaration seems not right.

program: STRUCT LC KFLOAT SEMI STAR
##
## Ends in an error in state: 73.
##
## list(def) -> def . list(def) [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ]
##
## The known suffix of the stack is as follows:
## def
##

Invalid declaration in struct definition.

program: KFLOAT WHILE
##
## Ends in an error in state: 76.
##
## ext_def -> specifier . loption(separated_nonempty_list(COMMA,var_dec)) SEMI [ STRUCT KINT KFLOAT EOF ]
## ext_def -> specifier . fun_dec comp_st [ STRUCT KINT KFLOAT EOF ]
##
## The known suffix of the stack is as follows:
## specifier
##

This is external declaration, and this logic line is wrong.

program: KFLOAT ID WHILE
##
## Ends in an error in state: 77.
##
## fun_dec -> ID . LP var_list RP [ LC ]
## fun_dec -> ID . LP RP [ LC ]
## var_dec -> ID . [ SEMI LB COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

Too much identifiers for one object.

program: KFLOAT ID LP WHILE
##
## Ends in an error in state: 78.
##
## fun_dec -> ID LP . var_list RP [ LC ]
## fun_dec -> ID LP . RP [ LC ]
##
## The known suffix of the stack is as follows:
## ID LP
##

See what did you stuck in this poor function parameter list!

program: KFLOAT ID LP KFLOAT WHILE
##
## Ends in an error in state: 82.
##
## param_dec -> specifier . var_dec [ RP COMMA ]
##
## The known suffix of the stack is as follows:
## specifier
##

And what did you variable declaration gone?

program: KFLOAT ID LP KFLOAT ID WHILE
##
## Ends in an error in state: 83.
##
## param_dec -> specifier var_dec . [ RP COMMA ]
## var_dec -> var_dec . LB INT RB [ RP LB COMMA ]
##
## The known suffix of the stack is as follows:
## specifier var_dec
##

Invalid parameter declaration.

program: KFLOAT ID LP KFLOAT ID COMMA WHILE
##
## Ends in an error in state: 85.
##
## var_list -> param_dec COMMA . var_list [ RP ]
##
## The known suffix of the stack is as follows:
## param_dec COMMA
##

Invalid parameter declaration.

program: KFLOAT ID COMMA ID WHILE
##
## Ends in an error in state: 87.
##
## separated_nonempty_list(COMMA,var_dec) -> var_dec . [ SEMI ]
## separated_nonempty_list(COMMA,var_dec) -> var_dec . COMMA separated_nonempty_list(COMMA,var_dec) [ SEMI ]
## var_dec -> var_dec . LB INT RB [ SEMI LB COMMA ]
##
## The known suffix of the stack is as follows:
## var_dec
##

This should be another variable declaration or some expressions.

program: KFLOAT ID COMMA WHILE
##
## Ends in an error in state: 88.
##
## separated_nonempty_list(COMMA,var_dec) -> var_dec COMMA . separated_nonempty_list(COMMA,var_dec) [ SEMI ]
##
## The known suffix of the stack is as follows:
## var_dec COMMA
##

This should be another variable declarations.

program: KFLOAT ID LP RP WHILE
##
## Ends in an error in state: 93.
##
## ext_def -> specifier fun_dec . comp_st [ STRUCT KINT KFLOAT EOF ]
##
## The known suffix of the stack is as follows:
## specifier fun_dec
##

Where do your function body gone?

program: KFLOAT ID LP RP LC STAR
##
## Ends in an error in state: 94.
##
## comp_st -> LC . list(def) list(stmt) RC [ WHILE STRUCT RETURN RC NOT MINUS LP LC KINT KFLOAT INT IF ID FLOAT EOF ELSE ]
##
## The known suffix of the stack is as follows:
## LC
##

Invalid compound statement.

program: KFLOAT ID LP RP LC WHILE WHILE
##
## Ends in an error in state: 96.
##
## stmt -> WHILE . LP exp RP stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## WHILE
##

Invalid while statement.

program: KFLOAT ID LP RP LC WHILE LP WHILE
##
## Ends in an error in state: 97.
##
## stmt -> WHILE LP . exp RP stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## WHILE LP
##

No no no, this should no appear in a while condition.

program: KFLOAT ID LP RP LC WHILE LP FLOAT SEMI
##
## Ends in an error in state: 98.
##
## exp -> exp . ASSIGNOP exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## stmt -> WHILE LP exp . RP stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## WHILE LP exp
##

There should be an operator.

program: KFLOAT ID LP RP LC WHILE LP FLOAT RP STRUCT
##
## Ends in an error in state: 99.
##
## stmt -> WHILE LP exp RP . stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## WHILE LP exp RP
##

The statement after while gone wrong.

program: KFLOAT ID LP RP LC RETURN WHILE
##
## Ends in an error in state: 100.
##
## stmt -> RETURN . exp SEMI [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## RETURN
##

An expression here, please.

program: KFLOAT ID LP RP LC RETURN FLOAT RP
##
## Ends in an error in state: 101.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## stmt -> RETURN exp . SEMI [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## RETURN exp
##

This return is a mess.

program: KFLOAT ID LP RP LC IF WHILE
##
## Ends in an error in state: 103.
##
## stmt -> IF . LP exp RP stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
## stmt -> IF . LP exp RP stmt ELSE stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## IF
##

If what?

program: KFLOAT ID LP RP LC IF LP WHILE
##
## Ends in an error in state: 104.
##
## stmt -> IF LP . exp RP stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
## stmt -> IF LP . exp RP stmt ELSE stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## IF LP
##

What condition do you want for 'if'?

program: KFLOAT ID LP RP LC IF LP FLOAT SEMI
##
## Ends in an error in state: 105.
##
## exp -> exp . ASSIGNOP exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR RP PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## stmt -> IF LP exp . RP stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
## stmt -> IF LP exp . RP stmt ELSE stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## IF LP exp
##

There should be an operator.

program: KFLOAT ID LP RP LC IF LP FLOAT RP STRUCT
##
## Ends in an error in state: 106.
##
## stmt -> IF LP exp RP . stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
## stmt -> IF LP exp RP . stmt ELSE stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## IF LP exp RP
##

So what do you want after if?

program: KFLOAT ID LP RP LC IF LP FLOAT RP LC RC STRUCT
##
## Ends in an error in state: 107.
##
## stmt -> IF LP exp RP stmt . [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
## stmt -> IF LP exp RP stmt . ELSE stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## IF LP exp RP stmt
##

Another statement, or 'else'.

program: KFLOAT ID LP RP LC IF LP FLOAT RP LC RC ELSE STRUCT
##
## Ends in an error in state: 108.
##
## stmt -> IF LP exp RP stmt ELSE . stmt [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## IF LP exp RP stmt ELSE
##

Else what?

program: KFLOAT ID LP RP LC FLOAT RP
##
## Ends in an error in state: 110.
##
## exp -> exp . ASSIGNOP exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . AND exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . OR exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GT exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LT exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . GEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . EEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . NEQ exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . PLUS exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . MINUS exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . STAR exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DIV exp [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LP loption(separated_nonempty_list(COMMA,exp)) RP [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . LB exp RB [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## exp -> exp . DOT ID [ STAR SEMI PLUS OR NEQ MINUS LT LP LEQ LB GT GEQ EEQ DOT DIV ASSIGNOP AND ]
## stmt -> exp . SEMI [ WHILE RETURN RC NOT MINUS LP LC INT IF ID FLOAT ELSE ]
##
## The known suffix of the stack is as follows:
## exp
##

Should be an operator.

program: KFLOAT ID LP RP LC LC RC STRUCT
##
## Ends in an error in state: 114.
##
## list(stmt) -> stmt . list(stmt) [ RC ]
##
## The known suffix of the stack is as follows:
## stmt
##

This statement seems to be a little ill.

program: KFLOAT SEMI WHILE
##
## Ends in an error in state: 122.
##
## list(ext_def) -> ext_def . list(ext_def) [ EOF ]
##
## The known suffix of the stack is as follows:
## ext_def
##

This external statement seems to be problematic.

