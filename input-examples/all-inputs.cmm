// A-10.cmm
int hello_world() { return; }

int main() {
  hello_world();
  return 0;
}

// A-1.cmm
int main() {
  int err[];
  return 0;
}

// A-2.cmm
int sum(int a, int b) {
  int sum = a + b;
  return 2sum;
}

int main() { return 0; }

// A-3.cmm
int main() {
  int n = 5;
  int factorial = 1;
  while (n > 0) {
    factorial *= n;
    n = n - 1;
  }
  return 0;
}

// A-4.cmm
struct Student {
  int id;
  float gpa;
};

int main() {
  Student student;
  student.id = 1;
  student.gpa = 32;
  return 0;
}

// A-5.cmm
int main() {
  int arr[5], ;
  int sum = 0, i = 0;
  while (i < 5) {
    sum = sum + arr[i];
    i = i + 1;
  }
  return 0;
}

// A-6.cmm
int gcd = 0;

int main() {
  int a = 24;
  int b = 36;
  while (a != b) {
    if (a > b) {
      a = a - b;
    } else {
      b = b - a;
    }
  }
  gcd = a;
  return 0;
}

// A-7.cmm
int main() {
  int a = 10;
  int b = 20;
  return max~(a, b);
}

// A-8.cmm
int main() {
  int max_value = 9;
  while (max_value)
    ;
  return 0;
}

// A-9.cmm
int factorial(int) {
  if (n == 0) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}

int main() { return factorial(5); }

// B-1.cmm
int main() {
  int n = 1b1010;
  int fib1 = 0; int fib2 = 1, fib;
  int i = 2;
  if (n !n) {
    n = n * 1;
  } else {
    n, n / 1;
  }
  while (i <= n) {
    fib = fib1 + fib2 + ;
    fib1 = fib2;
    fib2 = fib;
    i = i + 1;
  };
  return 0;
}

// B-2.cmm
struct Point {
  float x;
  float y;
};

float distance(struct Point a, struct b) {
  float d;
  d = sqrt(square(a.x - b.x) + square(a.y - b.y));
  float result = d;
  return result;
}

int main(void) {
  struct Point p;
  p.x = 0.12.3;
  p.y = .20;
  return 0
}

// C-1.cmm
float matrixMultiply(int matrix1[3][2], int matrix2[2][3], int result[3][3]) {
  int i = 0;
  while (i < 3) {
    int j = 0;
    while (j < 3) {
      int k = 0;
      result[i][j] = 0;
      while (k < 2) {
        result[i][j] = result[i][j] + matrix1[i][k] * matrix2[k][j];
        k = k + 1;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  return -0.0;
}

int main() {
  int matrix1[3][2];
  int matrix2[2][3];
  int result[3][3];
  matrixMultiply(matrix1, matrix2, result);
  return 0;
}


// C-2.cmm
int minDistance(int dist[6], int visited[6]) {
  int min = 2147483647, min_index, v = 0;
  while (v < 6) {
    if (!visited[v] && dist[v] <= min) {
      min = dist[v];
      min_index = v;
    }
    v = v + 1;
  }
  return min_index;
}

int dijkstra(int graph[6][6], int src) {
  int dist[6];
  int visited[6];
  int i = 0;
  int count = 0;

  while (i < 6) {
    dist[i] = 2147483647;
    visited[i] = 0;
    i = i + 1;
  }

  dist[src] = 0;

  while (count < 6 - 1) {
    int v = 0, u = minDistance(dist, visited);
    visited[u] = 1;

    while (v < 6) {
      if (!visited[v] && graph[u][v] && dist[u] != 2147483647 &&
          dist[u] + graph[u][v] < dist[v]) {
        dist[v] = dist[u] + graph[u][v];
      }
      v = v + 1;
    }
    count = count + 1;
  }
  return 0;
}

int main() {
  int graph[6][6];
  dijkstra(graph, 0);
  return 0;
}

// D-1.cmm
int main() {
  int oct1 = 0123;
  int hex1 = 0xAdA0f12;
  int hex2 = 0Xf1b3;
  int oct2 = 0007;

  int hex4 = hex1 + hex2;
  oct2 = !(-oct1);

  return 0;
}

// D-2.cmm
int main() {
  float num1 = 0.23e-4;
  float num2 = -9.99E6;
}

// D-3.cmm
/* This is a test program. */

int main() {
  // This is a comment line.
  int x = 5; // let x be 5

  return /* return value */ 0;
}

// E1-1.cmm
int foo(int a, int b) {
  int bar = 01234 * a || b;
  return bar + 0xdead;
}

int main() {
  int octal_num = 012;
  int hex_num = 0x1A;
  int sum = octal_num + hex_num;
  hex_num = foo(octal_num, sum);

  return 0;
}

// E1-2.cmm
int main() {
  int x = 0123456789;
  int y = 0XABCdefGHI;
  float result = sqrt(pow(x, 2) + pow(y, 2)) / (x + y) - pow(x * y, 2);

  return 0;
}

// E2-1.cmm
int main() {
  float PI = 0314159.e-5;
  float radius = 6.250e1;
  float volume = (4.0 / 3.0) * PI * radius * radius * radius;

  float length = 2.5e-03 / 3.54 + -(-123.0E-3);
  float width = 1.88E2 + 100 * .57e-1;
  float perimeter = 2 * (length + width);
  float area = length * width;

  return 0;
}

// E2-2.cmm
int main() {
  float length = 9.8e1.;
  float width = 6e5;

  return 0;
}

// E3-1.cmm
/* 这是一个复杂的注释示例。
   它包含一些特殊符号，例如 / 和 **。这些符号容易造成
   词法分析器（lexer）错误。 */
/*./\/\/\
\\\(((**\/./\\(*))))*/
/**********这是一个合法的注释*(**\/*\**\)*/
///****\\\\\/./\\\\../\**

int main() {
  int x = 10; // 这是一个简单的注释。
  int y = 20; /* 这是另一个注释，它包含
                  多行内容。 */

  // /* 以下是一个嵌套注释的示例：
  //    /* 这是嵌套注释的内部注释。
  //        注意这里的特殊符号。*/
  // */
  /*注释也可以放在行首*/ return /*注释也可以放在语句
  中*/ 0;
}

// E3-2.cmm
int main() {

  /* 以下是一个非法嵌套注释的示例：
     /* 这是嵌套注释的内部注释。
     注意这里的特殊符号。 */
  */ return 0;
}

